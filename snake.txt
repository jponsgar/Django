Ejecutar con Django, el programa snake.js en el html index.html. Indicar todos los pasos, Y comandos.
Al iniciar el juego snake, solicitar nombre del jugador,  y al finalizar el juego mostrar lista jugadores por puntos y nombre.

from snake.models import snake
snake= Snake(nombre='', puntos='')

Usar vistas basadas en clases (Class-Based Views)

con la Estructura de Directorios y Archivos:

snakeapp/
│
├── snake/
│   ├── migrations/
│   ├── static/
│   │   └── snake.js
│   ├── templates/
│   │   └── index.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   └── urls.py
│
├── snakeapp/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── manage.py
└── db.sqlite3

JavaScript 'snake.js':


// Definicion variables
const canvas = document.getElementById('juegoSerpiente');
const ctx = canvas.getContext('2d');
const botonSt = document.getElementById('botonStart');
const puntosDisplay = document.getElementById('puntos');
const cuadrado = 20;
// Empieza el juego con la serpiente en medio de la pantalla
let serpiente = [{x: canvas.width/2, y: canvas.height/2}];
let dx = cuadrado;
let dy = 0;
// Asignación aleatoria coordenadas con valor entero redondeado
// en una cuadrícula de 20x20 y múltiplo del tamaño del cuadrado 
let manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
let juego;
let puntos = 0;
ctx.fillStyle = "rgba(125,255,90,0.9)";
ctx.fillRect(0, 0, canvas.width, canvas.height);
let selectorVeloz = document.getElementById('veloz');

// Eventos listener para boton Start del juego y flechas teclado
botonSt.addEventListener('click', empiezoJ);
document.addEventListener('keydown', cambioDireccion);

function empiezoJ() {
  // Reset juego
  serpiente = [{x: canvas.width/2, y: canvas.height/2}];
  dx = cuadrado;
  dy = 0;
  manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
  puntos = 0;

  // Detener el intervalo del juego
  if (juego) {
    clearInterval(juego);
  }
  
  // Velocidad juego. Convierte este valor de cadena a un número entero
    velo = parseInt(selectorVeloz.value);

  // Optiene texto del option
    combo = document.getElementById('veloz');
    nivel = combo.options[combo.selectedIndex].text;
    salida = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
    document.getElementById("output").innerHTML = salida;

  // Empieza juego si se selecciona velocidad, y define el intervalo actualización juego
  if (velo >= 50 && velo <= 200) {
    juego = setInterval(dibujo, velo);
  }
}

function cambioDireccion(e) {
  if (e.keyCode === 37 && dx !== cuadrado) { // flecha izquierda
    dx = -cuadrado;
    dy = 0;
  } else if (e.keyCode === 38 && dy !== cuadrado) { // flecha arriba
    dx = 0;
    dy = -cuadrado;
  } else if (e.keyCode === 39 && dx !== -cuadrado) { // flecha derecha
    dx = cuadrado;
    dy = 0;
  } else if (e.keyCode === 40 && dy !== -cuadrado) { // flecha abajo
    dx = 0;
    dy = cuadrado;
  }
}

function dibujo() {
  // Borra todo el area del cuadrado
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Background fondo verde
  let imagen = new Image();
  imagen.src = "fondo_verde.jpg";
  let patron = ctx.createPattern(imagen, "no-repeat");
  ctx.fillStyle = patron;
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Cuadrado manzana
  ctx.fillStyle = 'red';
  ctx.fillRect(manzana.x, manzana.y, cuadrado, cuadrado);

  // Contorno cuadrado manzana
  ctx.strokeStyle = 'black';
  ctx.strokeRect(manzana.x, manzana.y, cuadrado, cuadrado);

  // Cuadrado serpiente
  ctx.fillStyle = 'white';
  serpiente.forEach((segment) => {
  ctx.fillRect(segment.x, segment.y, cuadrado, cuadrado);
  
  // Contorno cuadrado serpiente
  ctx.strokeStyle = 'black';
  ctx.strokeRect(segment.x, segment.y, cuadrado, cuadrado);
  });

  // Agrega una coordenada al array serpiente
  const cabeza = {x: serpiente[0].x + dx, y: serpiente[0].y + dy};
  serpiente.unshift(cabeza);

  // Comprueba si la serpiente come manzana sino elimina última coordenada del array y la devuelve
  // cada diez manzanas sube un nivel
  if (cabeza.x === manzana.x && cabeza.y === manzana.y) {
    manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
    puntos++;
    salida = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
    document.getElementById("output").innerHTML = salida;
    if (puntos % 10 === 0) {
      levelUp();
    }
  } else {
    serpiente.pop();
  }

  // Comprueba si la serpiente colisiona con el limite o ella misma, entonces finaliza juego
  if (cabeza.x < 0 || cabeza.x >= canvas.width || cabeza.y < 0 || cabeza.y >= canvas.height || colision()) {
    clearInterval(juego);
    alert("Fin del Juego !!! ");
  }
}

// Función para subir nivel cada 10 manzanas
function levelUp() {
  clearInterval(juego);
  juego = setInterval(dibujo, velo);
  velo = Math.max(velo - 50, 50)
   if (velo === 200) {
    nivel = "Facil";
  } else if (velo === 150) {
    nivel =  "Medio";
  } else if (velo === 100) {
    nivel =  "Difícil";
  } else {
    nivel =  "Muy Difícil";
  }
  output = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
  document.getElementById("output").innerHTML = output;
}

// Comprueba colision con ella misma:
// 'serpiente.slice(1)' matriz que contiene todos los segmentos de la serpiente, excepto la cabeza.
// 'some()' pasa por cada elemento en la matriz serpiente.slice(1), y
// aplica la función (segment => segment.x === serpiente[0].x && segment.y === serpiente[0].y) a cada segmento
function colision() {
  return serpiente.slice(1).some(segment => segment.x === serpiente[0].x && segment.y === serpiente[0].y);
}


Url index.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake</title>
  <link rel="icon" type="image/x-icon" href="snake_ico.jpg">
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <img src="sanke_t.png">
  </header>
   <div>
      <label for="select" style="background-color: white"><strong>Dificultad Inicio: </strong></label>
      <select id="veloz">
        <option disabled selected value="0">Elige Nivel</option>
        <option value="200">Facil</option>
        <option value="150">Medio</option>
        <option value="100">Difícil</option>
        <option value="50">Muy Difícil</option>
      </select>
   </div>
  <section>
       <canvas id="juegoSerpiente" width="400" height="400"></canvas>
  </section>
       <button id="botonStart"><strong>Empezar Juego</strong></button>
       <script src="snake.js"></script>
  <footer><p id="output"></p></footer>
</body>
</html>


Para integrar y ejecutar el juego "Snake" en una aplicación Django, solicitando el nombre del jugador al inicio y mostrando una lista de jugadores con sus puntos al final, sigue los siguientes pasos detallados. La implementación usará vistas basadas en clases (Class-Based Views) y se ajustará a la estructura de directorios y archivos proporcionada.

### Paso 1: Configuración del entorno Django

1. **Crear el proyecto Django:**
   ```sh
   django-admin startproject snakeapp
   cd snakeapp
   ```

2. **Crear la aplicación dentro del proyecto:**
   ```sh
   python manage.py startapp snake
   ```

3. **Añadir la aplicación al archivo `settings.py`:**
   ```python
   INSTALLED_APPS = [
       # ... otras aplicaciones ...
       'snake',
   ]
   ```

### Paso 2: Definir el modelo

Edita `snake/models.py` para definir el modelo `Snake` que almacenará los nombres de los jugadores y sus puntos.

```python
from django.db import models

class Snake(models.Model):
    nombre = models.CharField(max_length=100)
    puntos = models.IntegerField()

    def __str__(self):
        return f'{self.nombre} - {self.puntos}'
```

Ejecuta las migraciones para crear la tabla en la base de datos:

```sh
python manage.py makemigrations
python manage.py migrate
```

### Paso 3: Crear las vistas

Edita `snake/views.py` para definir las vistas usando Class-Based Views.

```python
from django.shortcuts import render, redirect
from django.views import View
from .models import Snake

class IndexView(View):
    def get(self, request):
        return render(request, 'index.html')

class SaveScoreView(View):
    def post(self, request):
        nombre = request.POST.get('nombre')
        puntos = request.POST.get('puntos')
        Snake.objects.create(nombre=nombre, puntos=puntos)
        return redirect('scoreboard')

class ScoreboardView(View):
    def get(self, request):
        jugadores = Snake.objects.all().order_by('-puntos')
        return render(request, 'scoreboard.html', {'jugadores': jugadores})
```

### Paso 4: Configurar las URLs

Edita `snake/urls.py` para definir las rutas de las vistas.

```python
from django.urls import path
from .views import IndexView, SaveScoreView, ScoreboardView

urlpatterns = [
    path('', IndexView.as_view(), name='index'),
    path('save-score/', SaveScoreView.as_view(), name='save_score'),
    path('scoreboard/', ScoreboardView.as_view(), name='scoreboard'),
]
```

Edita `snakeapp/urls.py` para incluir las rutas de la aplicación `snake`.

```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('snake.urls')),
]
```

### Paso 5: Crear las plantillas HTML

Crea `snake/templates/index.html` para el juego y el formulario de nombre.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake</title>
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <header>
        <img src="{% static 'snake_t.png' %}" alt="Snake">
    </header>
    <div>
        <label for="nombre"><strong>Nombre del Jugador: </strong></label>
        <input type="text" id="nombre" name="nombre">
        <label for="veloz"><strong>Dificultad Inicio: </strong></label>
        <select id="veloz">
            <option disabled selected value="0">Elige Nivel</option>
            <option value="200">Fácil</option>
            <option value="150">Medio</option>
            <option value="100">Difícil</option>
            <option value="50">Muy Difícil</option>
        </select>
    </div>
    <section>
        <canvas id="juegoSerpiente" width="400" height="400"></canvas>
    </section>
    <button id="botonStart"><strong>Empezar Juego</strong></button>
    <footer><p id="output"></p></footer>

    <form id="saveScoreForm" method="post" action="{% url 'save_score' %}">
        {% csrf_token %}
        <input type="hidden" id="inputNombre" name="nombre">
        <input type="hidden" id="inputPuntos" name="puntos">
    </form>

    <script src="{% static 'snake.js' %}"></script>
</body>
</html>
```

Crea `snake/templates/scoreboard.html` para mostrar la tabla de puntuaciones.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scoreboard</title>
</head>
<body>
    <h1>Tabla de Puntuaciones</h1>
    <table>
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Puntos</th>
            </tr>
        </thead>
        <tbody>
            {% for jugador in jugadores %}
                <tr>
                    <td>{{ jugador.nombre }}</td>
                    <td>{{ jugador.puntos }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
```

### Paso 6: JavaScript para el juego

Edita `snake/static/snake.js` para integrar la funcionalidad de guardar la puntuación al finalizar el juego.

```javascript
    document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('juegoSerpiente');
    const ctx = canvas.getContext('2d');
    const botonSt = document.getElementById('botonStart');
    const nombreInput = document.getElementById('nombre');
    const puntosDisplay = document.getElementById('output');
    const cuadrado = 20;
    let serpiente = [{x: canvas.width / 2, y: canvas.height / 2}];
    let dx = cuadrado;
    let dy = 0;
    let manzana = {
        x: Math.floor(Math.random() * 20) * cuadrado,
        y: Math.floor(Math.random() * 20) * cuadrado
    };
    let juego;
    let puntos = 0;
    let selectorVeloz = document.getElementById('veloz');

    botonSt.addEventListener('click', empiezoJ);
    document.addEventListener('keydown', cambioDireccion);

    function empiezoJ() {
        // Validar nombre del jugador
        if (!nombreInput.value) {
            alert('Por favor, ingresa tu nombre.');
            return;
        }

        // Reset juego
        serpiente = [{x: canvas.width / 2, y: canvas.height / 2}];
        dx = cuadrado;
        dy = 0;
        manzana = {
            x: Math.floor(Math.random() * 20) * cuadrado,
            y: Math.floor(Math.random() * 20) * cuadrado
        };
        puntos = 0;

        // Detener el intervalo del juego
        if (juego) {
            clearInterval(juego);
        }

        // Velocidad juego
        let velo = parseInt(selectorVeloz.value);
        if (velo >= 50 && velo <= 200) {
            juego = setInterval(dibujo, velo);
        }
    }

    function cambioDireccion(e) {
        if (e.keyCode === 37 && dx !== cuadrado) {
            dx = -cuadrado;
            dy = 0;
        } else if (e.keyCode === 38 && dy !== cuadrado) {
            dx = 0;
            dy = -cuadrado;
        } else if (e.keyCode === 39 && dx !== -cuadrado) {
            dx = cuadrado;
            dy = 0;
        } else if (e.keyCode === 40 && dy !== -cuadrado) {
            dx = 0;
            dy = cuadrado;
        }
    }

    function dibujo() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'rgba(125,255,90,0.9)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Cuadrado manzana
        ctx.fillStyle = 'red';
        ctx.fillRect(manzana.x, manzana.y, cuadrado, cuadrado);

        // Contorno cuadrado manzana
        ctx.strokeStyle = 'black';
        ctx.strokeRect(manzana.x, manzana.y, cuadrado, cuadrado);

        // Cuadrado serpiente
        ctx.fillStyle = 'white';
        serpiente.forEach((segment) => {
            ctx.fillRect(segment.x, segment.y, cuadrado, cuadrado);
            ctx.strokeStyle = 'black';
            ctx.strokeRect(segment.x, segment.y, cuadrado, cuadrado);
        });

        // Agrega una coordenada al array serpiente
        const cabeza = {x: serpiente[0].x + dx, y: serpiente[0].y + dy};
       

 serpiente.unshift(cabeza);

        if (cabeza.x === manzana.x && cabeza.y === manzana.y) {
            manzana = {
                x: Math.floor(Math.random() * 20) * cuadrado,
                y: Math.floor(Math.random() * 20) * cuadrado
            };
            puntos++;
            puntosDisplay.textContent = `Puntuación: ${puntos}`;
        } else {
            serpiente.pop();
        }

        if (cabeza.x < 0 || cabeza.x >= canvas.width || cabeza.y < 0 || cabeza.y >= canvas.height || colision()) {
            clearInterval(juego);
            alert("Fin del Juego !!!");
            guardarPuntuacion();
        }
    }

    function colision() {
        return serpiente.slice(1).some(segment => segment.x === serpiente[0].x && segment.y === serpiente[0].y);
    }

    function guardarPuntuacion() {
        const inputNombre = document.getElementById('inputNombre');
        const inputPuntos = document.getElementById('inputPuntos');
        inputNombre.value = nombreInput.value;
        inputPuntos.value = puntos;
        document.getElementById('saveScoreForm').submit();
    }
});
```

### Paso 7: Ejecutar el servidor y probar

Finalmente, ejecuta el servidor Django para verificar que todo funcione correctamente:

```sh
python manage.py runserver
```

Accede a `http://127.0.0.1:8000` para ver el juego y probar la funcionalidad. Al finalizar el juego, se debería guardar la puntuación y luego poder verla en la tabla de puntuaciones.

Esto completa la integración del juego "Snake" en una aplicación Django, incluyendo la solicitud del nombre del jugador al inicio y la presentación de una lista de jugadores con sus puntos al final.