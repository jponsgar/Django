Para integrar el juego de Snake en una aplicación Django y manejar la lógica de almacenamiento de puntajes, aquí están los pasos detallados y los comandos necesarios:

### 1. Configuración del Proyecto Django

#### a. Crear el proyecto Django
```bash
django-admin startproject snakeapp
cd snakeapp
```

#### b. Crear la aplicación Django
```bash
python manage.py startapp snake
```

### 2. Definir el Modelo de Datos

#### a. `snake/models.py`
```python
from django.db import models

class Snake(models.Model):
    nombre = models.CharField(max_length=50)
    puntos = models.IntegerField()

    def __str__(self):
        return self.nombre
```

#### b. Crear y aplicar las migraciones
```bash
python manage.py makemigrations snake
python manage.py migrate
```

### 3. Configurar las Vistas y URLs

#### a. `snake/views.py`
```python
from django.shortcuts import render
from django.views.generic import ListView, CreateView, UpdateView
from .models import Snake
from django.urls import reverse_lazy

class SnakeCreateView(CreateView):
    model = Snake
    fields = ['nombre', 'puntos']
    template_name = 'index.html'
    success_url = reverse_lazy('snake_list')

class SnakeListView(ListView):
    model = Snake
    template_name = 'snake_list.html'
    context_object_name = 'snakes'

class SnakeUpdateView(UpdateView):
    model = Snake
    fields = ['nombre', 'puntos']
    template_name = 'snake_update.html'
    success_url = reverse_lazy('snake_list')
```

#### b. `snake/urls.py`
```python
from django.urls import path
from .views import SnakeCreateView, SnakeListView, SnakeUpdateView

urlpatterns = [
    path('', SnakeCreateView.as_view(), name='snake_create'),
    path('list/', SnakeListView.as_view(), name='snake_list'),
    path('update/<int:pk>/', SnakeUpdateView.as_view(), name='snake_update'),
]
```

#### c. `snakeapp/urls.py`
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('snake.urls')),
]
```

### 4. Configurar Plantillas

#### a. `snake/templates/index.html`
```html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake</title>
  <link rel="stylesheet" href="{% static 'styles.css' %}">
  <script src="{% static 'snake.js' %}"></script>
</head>
<body>
  <header>
    <img src="{% static 'snake_t.png' %}" alt="Snake">
  </header>
  <div>
    <label for="select"><strong>Dificultad Inicio: </strong></label>
    <select id="veloz">
      <option disabled selected value="0">Elige Nivel</option>
      <option value="200">Facil</option>
      <option value="150">Medio</option>
      <option value="100">Difícil</option>
      <option value="50">Muy Difícil</option>
    </select>
  </div>
  <section>
    <canvas id="juegoSerpiente" width="400" height="400"></canvas>
  </section>
  <button id="botonStart"><strong>Empezar Juego</strong></button>
  <footer><p id="output"></p></footer>
  <script>
    window.onload = function() {
        var nombre = prompt("Por favor, ingresa tu nombre:");
        if (nombre) {
            localStorage.setItem('nombreJugador', nombre);
        }
        initSnakeGame();
    };
  </script>
</body>
</html>
```

#### b. `snake/templates/snake_list.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Lista de Puntajes</title>
</head>
<body>
  <h1>Lista de Puntajes</h1>
  <ul>
    {% for snake in snakes %}
    <li>{{ snake.nombre }}: {{ snake.puntos }}</li>
    {% endfor %}
  </ul>
  <a href="{% url 'snake_create' %}">Jugar de nuevo</a>
</body>
</html>
```

### 5. Implementar el JavaScript para el Juego

#### a. `snake/static/snake.js`
Modifica el archivo JavaScript para manejar el fin del juego y enviar los datos al servidor.

```javascript
function initSnakeGame() {
  // Definicion variables
  const canvas = document.getElementById('juegoSerpiente');
  const ctx = canvas.getContext('2d');
  const botonSt = document.getElementById('botonStart');
  const puntosDisplay = document.getElementById('puntos');
  const cuadrado = 20;
  let serpiente = [{x: canvas.width/2, y: canvas.height/2}];
  let dx = cuadrado;
  let dy = 0;
  let manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
  let juego;
  let puntos = 0;
  ctx.fillStyle = "rgba(125,255,90,1.0)";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  let selectorVeloz = document.getElementById('veloz');

  botonSt.addEventListener('click', empiezoJ);
  document.addEventListener('keydown', cambioDireccion);

  function empiezoJ() {
    serpiente = [{x: canvas.width/2, y: canvas.height/2}];
    dx = cuadrado;
    dy = 0;
    manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
    puntos = 0;

    if (juego) {
      clearInterval(juego);
    }

    let velo = parseInt(selectorVeloz.value);
    let combo = document.getElementById('veloz');
    let nivel = combo.options[combo.selectedIndex].text;
    let salida = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
    document.getElementById("output").innerHTML = salida;

    if (velo >= 50 && velo <= 200) {
      juego = setInterval(dibujo, velo);
    }
  }

  function cambioDireccion(e) {
    if (e.keyCode === 37 && dx !== cuadrado) {
      dx = -cuadrado;
      dy = 0;
    } else if (e.keyCode === 38 && dy !== cuadrado) {
      dx = 0;
      dy = -cuadrado;
    } else if (e.keyCode === 39 && dx !== -cuadrado) {
      dx = cuadrado;
      dy = 0;
    } else if (e.keyCode === 40 && dy !== -cuadrado) {
      dx = 0;
      dy = cuadrado;
    }
  }

  function dibujo() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "rgba(125,255,90,1.0)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = 'red';
    ctx.fillRect(manzana.x, manzana.y, cuadrado, cuadrado);
    ctx.strokeStyle = 'black';
    ctx.strokeRect(manzana.x, manzana.y, cuadrado, cuadrado);
    ctx.fillStyle = 'white';
    serpiente.forEach((segment) => {
      ctx.fillRect(segment.x, segment.y, cuadrado, cuadrado);
      ctx.strokeStyle = 'black';
      ctx.strokeRect(segment.x, segment.y, cuadrado, cuadrado);
    });

    const cabeza = {x: serpiente[0].x + dx, y: serpiente[0].y + dy};
    serpiente.unshift(cabeza);

    if (cabeza.x === manzana.x && cabeza.y === manzana.y) {
      manzana = {x: Math.floor(Math.random() * 20) * cuadrado, y: Math.floor(Math.random() * 20) * cuadrado};
      puntos++;
      let salida = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
      document.getElementById("output").innerHTML = salida;
      if (puntos % 10 === 0) {
        levelUp();
      }
    } else {
      serpiente.pop();
    }

    if (cabeza.x < 0 || cabeza.x >= canvas.width || cabeza.y < 0 || cabeza.y >= canvas.height || colision()) {
      clearInterval(juego);
      alert("Fin del Juego !!!");
      let nombre = localStorage.getItem('nombreJugador');
      guardarPuntuacion(nombre, puntos);
    }
  }

  function levelUp() {
    clearInterval(juego);
    juego = setInterval(dibujo, velo

);
    velo = Math.max(velo - 50, 50);
    if (velo === 200) {
      nivel = "Facil";
    } else if (velo === 150) {
      nivel = "Medio";
    } else if (velo === 100) {
      nivel = "Difícil";
    } else {
      nivel = "Muy Difícil";
    }
    output = ("Puntuación de: " + puntos + " Manzanas - Nivel Juego: " + nivel);
    document.getElementById("output").innerHTML = output;
  }

  function colision() {
    return serpiente.slice(1).some(segment => segment.x === serpiente[0].x && segment.y === serpiente[0].y);
  }

  function guardarPuntuacion(nombre, puntos) {
    fetch('/update/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCookie('csrftoken')
      },
      body: JSON.stringify({nombre: nombre, puntos: puntos})
    }).then(response => {
      if (response.ok) {
        window.location.href = '/list/';
      }
    });
  }

  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }
}
```

### 6. Configurar CSRF en Django

#### a. Añadir CSRF Token en el template base (`snake/templates/index.html`)
```html
<script>
  document.cookie = "csrftoken={{ csrf_token }}";
</script>
```

### 7. Configurar el Middleware CSRF

Asegúrate de que el middleware CSRF esté habilitado en `snakeapp/settings.py`:
```python
MIDDLEWARE = [
    ...
    'django.middleware.csrf.CsrfViewMiddleware',
    ...
]
```

### 8. Ejecutar el Servidor

```bash
python manage.py runserver
```

Visita `http://127.0.0.1:8000/` para ver la aplicación en acción.

### Estructura Final de Directorios y Archivos

```plaintext
snakeapp/
│
├── snake/
│   ├── migrations/
│   ├── static/
│   │   └── snake.js
│   ├── templates/
│   │   ├── index.html
│   │   └── snake_list.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   └── urls.py
│
├── snakeapp/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── manage.py
└── db.sqlite3
```

Estos pasos te permitirán crear un juego de Snake con Django, gestionar los puntajes de los jugadores, y mostrar una lista de puntajes utilizando vistas basadas en clases.