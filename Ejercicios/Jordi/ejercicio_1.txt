Para crear un sistema de autenticación en Django que permita a los usuarios registrarse, iniciar sesión y acceder a páginas protegidas, podemos seguir los siguientes pasos:

### Paso 1: Configuración inicial

1. **Crear un proyecto Django:**
   Si aún no tienes un proyecto Django configurado, puedes crear uno usando el siguiente comando:
   ```bash
   django-admin startproject ejercicio_1
   ```

2. **Crear una aplicación:**
   Dentro de tu proyecto Django, crea una nueva aplicación que manejará la autenticación y las vistas relacionadas.
   ```bash
   python manage.py startapp autenticacion
   ```

### Paso 2: Configuración de modelos y migraciones

1. **Modelo de perfil de usuario:**
   Puedes personalizar el modelo de usuario predeterminado de Django o usarlo directamente. Asegúrate de tener las configuraciones de tu base de datos adecuadas antes de proceder.

2. **Migraciones:**
   Realiza las migraciones necesarias para aplicar los cambios en tu base de datos.
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

### Paso 3: Configuración de vistas

1. **Vistas para registro, inicio de sesión y cierre de sesión:**
   En tu aplicación `autenticacion`, crea vistas para manejar el registro, inicio de sesión y cierre de sesión de usuarios.

   ```python
   # autenticacion/views.py
   from django.shortcuts import render, redirect
   from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
   from django.contrib.auth import login, logout
   from django.contrib.auth.decorators import login_required

   def signup_view(request):
       if request.method == 'POST':
           form = UserCreationForm(request.POST)
           if form.is_valid():
               user = form.save()
               login(request, user)
               return redirect('pagina_protegida')
       else:
           form = UserCreationForm()
       return render(request, 'signup.html', {'form': form})

   def login_view(request):
       if request.method == 'POST':
           form = AuthenticationForm(request, data=request.POST)
           if form.is_valid():
               user = form.get_user()
               login(request, user)
               return redirect('pagina_protegida')
       else:
           form = AuthenticationForm()
       return render(request, 'login.html', {'form': form})

   @login_required
   def logout_view(request):
       if request.method == 'POST':
           logout(request)
           return redirect('inicio')
   ```

### Paso 4: Configuración de URLs

1. **URLs para las vistas:**
   Configura las URLs en `urls.py` de tu aplicación para las vistas de registro, inicio de sesión y cierre de sesión.

   ```python
   # autenticacion/urls.py
   from django.urls import path
   from . import views

   urlpatterns = [
       path('signup/', views.signup_view, name='signup'),
       path('login/', views.login_view, name='login'),
       path('logout/', views.logout_view, name='logout'),
   ]
   ```

### Paso 5: Plantillas y configuración adicional

1. **Plantillas HTML:**
   Crea las plantillas HTML correspondientes (`signup.html`, `login.html`, `pagina_protegida.html`) y configúralas adecuadamente para mostrar formularios y contenido protegido.

2. **Configuración en `settings.py`:**
   Asegúrate de tener configurados los archivos estáticos y las plantillas en tu configuración de `settings.py`.

   ```python
   # settings.py
   TEMPLATES = [
       {
           ...
           'DIRS': [os.path.join(BASE_DIR, 'templates')],
           ...
       },
   ]

   STATIC_URL = '/static/'
   ```

### Paso 6: Protección de páginas con `@login_required`

1. **Decorador `@login_required`:**
   Usa el decorador `@login_required` en las vistas que deseas proteger.

   ```python
   # autenticacion/views.py
   from django.contrib.auth.decorators import login_required

   @login_required
   def pagina_protegida(request):
       return render(request, 'pagina_protegida.html')
   ```

2. **Configuración de URLs:**
   Asegúrate de que la URL para la página protegida también esté configurada en `urls.py`.

   ```python
   # autenticacion/urls.py
   urlpatterns = [
       ...
       path('pagina_protegida/', views.pagina_protegida, name='pagina_protegida'),
   ]
   ```

### Paso 7: Integración con el proyecto principal

1. **Incluye las URLs de tu aplicación en `urls.py` del proyecto principal:**
   ```python
   # ejercicio_1/urls.py
   from django.contrib import admin
   from django.urls import path, include

   urlpatterns = [
       path('admin/', admin.site.urls),
       path('', include('autenticacion.urls')),  # Incluir las URLs de la aplicación de autenticación
   ]
   ```

Con estos pasos, deberías tener un sistema básico de autenticación implementado en tu proyecto Django, que permite a los usuarios registrarse, iniciar sesión, cerrar sesión y acceder a páginas protegidas utilizando el decorador `@login_required`. Asegúrate de ajustar y personalizar según las necesidades específicas de tu proyecto.